var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};
__markAsModule(exports);
__export(exports, {
  yamlPlugin: () => yamlPlugin
});
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_js_yaml = __toModule(require("js-yaml"));
var import_util = __toModule(require("util"));
const yamlPlugin = (options) => ({
  name: "yaml",
  setup(build) {
    build.onResolve({filter: /\.(yml|yaml)$/}, (args) => {
      if (args.resolveDir === "")
        return;
      return {
        path: import_path.default.isAbsolute(args.path) ? args.path : import_path.default.join(args.resolveDir, args.path),
        namespace: "yaml"
      };
    });
    build.onLoad({filter: /.*/, namespace: "yaml"}, async (args) => {
      const yamlContent = await import_fs_extra.default.readFile(args.path);
      let parsed = import_js_yaml.default.load(new import_util.TextDecoder().decode(yamlContent), options?.loadOptions);
      if (options?.transform && options.transform(parsed, args.path) !== void 0)
        parsed = options.transform(parsed, args.path);
      return {
        contents: JSON.stringify(parsed),
        loader: "json"
      };
    });
  }
});
